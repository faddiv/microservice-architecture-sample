import { throwException } from "./ApiException";
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class BasketClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : window as any;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  basketGET(userName: string): Promise<ShoppingCart> {
      let url_ = this.baseUrl + "/basket/basket/{userName}";
      if (userName === undefined || userName === null)
          throw new Error("The parameter 'userName' must be defined.");
      url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "GET",
          headers: {
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processBasketGET(_response);
      });
  }

  protected processBasketGET(response: Response): Promise<ShoppingCart> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ShoppingCart;
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<ShoppingCart>(null as any);
  }

  /**
   * @return Success
   */
  basketDELETE(userName: string): Promise<void> {
      let url_ = this.baseUrl + "/basket/basket/{userName}";
      if (userName === undefined || userName === null)
          throw new Error("The parameter 'userName' must be defined.");
      url_ = url_.replace("{userName}", encodeURIComponent("" + userName));
      url_ = url_.replace(/[?&]$/, "");

      let options_: RequestInit = {
          method: "DELETE",
          headers: {
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processBasketDELETE(_response);
      });
  }

  protected processBasketDELETE(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  basketPOST(body: ShoppingCart): Promise<ShoppingCart> {
      let url_ = this.baseUrl + "/basket/basket";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: RequestInit = {
          body: content_,
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processBasketPOST(_response);
      });
  }

  protected processBasketPOST(response: Response): Promise<ShoppingCart> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ShoppingCart;
          return result200;
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<ShoppingCart>(null as any);
  }

  /**
   * @return Accepted
   */
  checkout(body: BasketCheckout): Promise<void> {
      let url_ = this.baseUrl + "/basket/basket/checkout";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(body);

      let options_: RequestInit = {
          body: content_,
          method: "POST",
          headers: {
              "Content-Type": "application/json",
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processCheckout(_response);
      });
  }

  protected processCheckout(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 202) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status === 400) {
          return response.text().then((_responseText) => {
          return throwException("Bad Request", status, _responseText, _headers);
          });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<void>(null as any);
  }
}

export interface BasketCheckout {
  userName?: string | undefined;
  totalPrice?: number;
  firstName?: string | undefined;
  lastName?: string | undefined;
  emailAddress?: string | undefined;
  addressLine?: string | undefined;
  country?: string | undefined;
  state?: string | undefined;
  zipCode?: string | undefined;
  cardName?: string | undefined;
  cardNumber?: string | undefined;
  expiration?: string | undefined;
  cvv?: string | undefined;
  paymentMethod?: number;
}

export interface ShoppingCart {
  userName?: string | undefined;
  items?: ShoppingCartItem[] | undefined;
  readonly totalPrice?: number;
}

export interface ShoppingCartItem {
  quantity?: number;
  color?: string | undefined;
  price?: number;
  productId?: string | undefined;
  productName?: string | undefined;
  discount?: number;
}
